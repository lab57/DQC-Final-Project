 @inproceedings{Burt_Chen_Leung_2024, title={Generalised Circuit Partitioning for Distributed Quantum Computing}, url={http://arxiv.org/abs/2408.01424}, DOI={10.1109/QCE60285.2024.10273}, abstractNote={Distributed quantum computing (DQC) is a new paradigm aimed at scaling up quantum computing via the interconnection of smaller quantum processing units (QPUs). Shared entanglement allows teleportation of both states and gates between QPUs. This leads to an attractive horizontal scaling of quantum processing power, which comes at the expense of the additional time and noise introduced by entanglement sharing protocols. Consequently, methods for partitioning quantum circuits across multiple QPUs should aim to minimise the amount of entanglement-based communication required between distributed QPUs. Existing protocols tend to focus primarily on optimising entanglement costs for gate teleportation or state teleportation to cover operations between QPUs, rather than both at the same time. The most general form of the problem should treat gate and state teleportation on the same footing, allowing minimal cost circuit partitions through a combination of the two. This work introduces a graph-based formulation which allows joint optimisation of gate and state teleportation cost, including extensions of gate teleportation which group gates together for distribution using common resources. The formulation permits low e-bit cost for a variety of circuit types. Using a basic genetic algorithm, improved performance over state-of-the-art methods is obtained in terms of both average e-bit cost and time scaling.}, note={arXiv:2408.01424 [quant-ph]}, booktitle={2024 IEEE International Conference on Quantum Computing and Engineering (QCE)}, author={Burt, Felix and Chen, Kuan-Cheng and Leung, Kin}, year={2024}, month=sep, pages={173â€“178} }
 @article{Promponas_Mudvari_Chiesa_Polakos_Samuel_Tassiulas_2024, title={Compiler for Distributed Quantum Computing: a Reinforcement Learning Approach}, url={http://arxiv.org/abs/2404.17077}, DOI={10.48550/arXiv.2404.17077}, abstractNote={The practical realization of quantum programs that require large-scale qubit systems is hindered by current technological limitations. Distributed Quantum Computing (DQC) presents a viable path to scalability by interconnecting multiple Quantum Processing Units (QPUs) through quantum links, facilitating the distributed execution of quantum circuits. In DQC, EPR pairs are generated and shared between distant QPUs, which enables quantum teleportation and facilitates the seamless execution of circuits. A primary obstacle in DQC is the efficient mapping and routing of logical qubits to physical qubits across different QPUs, necessitating sophisticated strategies to overcome hardware constraints and optimize communication. We introduce a novel compiler that, unlike existing approaches, prioritizes reducing the expected execution time by jointly managing the generation and routing of EPR pairs, scheduling remote operations, and injecting SWAP gates to facilitate the execution of local gates. We present a real-time, adaptive approach to compiler design, accounting for the stochastic nature of entanglement generation and the operational demands of quantum circuits. Our contributions are twofold: (i) we model the optimal compiler for DQC using a Markov Decision Process (MDP) formulation, establishing the existence of an optimal algorithm, and (ii) we introduce a constrained Reinforcement Learning (RL) method to approximate this optimal compiler, tailored to the complexities of DQC environments. Our simulations demonstrate that Double Deep Q-Networks (DDQNs) are effective in learning policies that minimize the depth of the compiled circuit, leading to a lower expected execution time and likelihood of successful operation before qubits decohere.}, note={arXiv:2404.17077 [quant-ph]}, number={arXiv:2404.17077}, publisher={arXiv}, author={Promponas, Panagiotis and Mudvari, Akrit and Chiesa, Luca Della and Polakos, Paul and Samuel, Louis and Tassiulas, Leandros}, year={2024}, month=apr }
